#!/bin/sh


show_help() {
  echo "
react-native starter script 1.0
Helps setup a new react-native projet with the name, bundleid and icons that you require
Commands available are:
  init - after copying this script to an empty folder run this command to setup normally tools
  create - create new  reactive project with specified name and bundle id
           ./rnstart create folder 'App Name' 'com.example.bundleid'
"
}


# Download latest version of react-native, to be used to create new project
rnstart_init() {
  rm -rf ./node_modules/ yarn.lock 
  yarn init -y
  yarn add react-native
}


# example
# ./node_modules/.bin/react-native init testapp777 --template=file:///Volumes/RAMDisk/rnstarter/node_modules/react-native/template
rnstart_create() {
  if [ $# != 3 ]; then show_help; exit; fi
  APP_NAME=$1
  ICON_LABEL="$2"
  BUNDLE_ID=$3

  echo "Creating $1 $2 $BUNDLE_ID"
  ./node_modules/.bin/react-native init xx_reactnative_creator_zz --template react-native-template-typescript --skip-install

  if [ $? = 0 ]; then
    # if new folder successfully created then go into folder
    mv xx_reactnative_creator_zz "$1"
    cd $1
    # commit new project
    git init
    git add .buckconfig .bundle/ .eslintrc.js .gitignore .prettierrc.js .ruby-version .watchmanconfig *
    git commit -m 'initial commit from react-native init'

    # copy files from react-native-creator script
    mkdir _tools
    cp ../android_multitool.java _tools/.
    cp -R ../node_modules .
    cp -R ../hooks ./
    cp ../env.* ../.eslintrc.js ../.prettierrc.js ../add_modules.sh ./
    cp ../run-app ./run
    git add * .eslintrc.js .prettierrc.js
    git commit -m 'add files and tools from react-native-creator'

    # set app bundleid, app name and icon label.  NOTE: order is important
    # To do in one step ./run rename-all $BUNDLE_ID $APP_NAME "$ICON_LABEL"
    ./run rename-bundleid $BUNDLE_ID
    git add *
    git commit -m 'Updated bundle id'
    ./run rename-appname $APP_NAME
    git add *
    git commit -m 'Updated app name'
    ./run update-app-label "$ICON_LABEL"
    git add *
    git commit -m 'Updated icon label'

    # apply patches
    ./run patch
    git add *
    git commit -m 'apply patches'

    # create assets folder
    mkdir assets

    # Go back to parent folder
    cd ..
  fi
}



# gem install unf_ext -v '0.0.7.7
rnstart_build() {
  echo "Building"
}


rnstart_test() {
  # IOS_PROJECT_FILE=$(find ./myapp/ios/  -name "project.pbxproj")
  # BUNDLE_ID="com.example.mobileapp"
  # echo "$IOS_PROJECT_FILE"
  # if [ ! -f "$IOS_PROJECT_FILE ${IOS_PROJECT_FILE}_original" ]; then cp $IOS_PROJECT_FILE ${IOS_PROJECT_FILE}_original; fi
  # sed -i "s/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\"/g" $IOS_PROJECT_FILE
  export SEARCH="    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug"
   export REPLACE="    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release"
  javac android_multitool.java && java android_multitool replace demoapp/android/app/build.gradle
}


if [ "$1" = "init" ]; then rnstart_init; exit; fi
if [ "$1" = "create" ]; then rnstart_create "$2" "$3" "$4"; exit; fi
if [ "$1" = "test" ]; then rnstart_test; exit; fi
if [ "$1" = "help" ]; then show_help; exit; fi


show_help
# echo "Command not found"